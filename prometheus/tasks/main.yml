# This playbook prepares and installs the Prometheus time series
# database and the push endpoint.

---
- name: Check validity of grafana admin password
  fail: msg="The grafana admin password has to be defined"
  when: grafana_sec_password == ''

- name: Prometheus scraping network
  command: "docker network create {{ service }}_net"
  ignore_errors: yes

- name: Prometheus data volume
  command: "docker volume create --name={{ service }}-db-data"

# template the application.properties and docker-compose.yml to the dest host
- name: "Prepare a configuration directory for {{ service }}"
  file:
    path: "{{ docker_config_dir }}/{{ service }}"
    state: directory
    mode: 0700

- name: Copy over the prometheus configuration
  copy:
    src: prometheus.yml
    dest: "{{ docker_config_dir }}/{{ service }}/prometheus.yml"
  register: promcfg

- name: Prometheus push gateway
  register: prompush
  docker:
    name: prometheus-push
    image: prom/pushgateway
    net: bridge
    expose: 9091
    pull: always
    restart_policy: always
    restart_policy_retry: 10
    state: reloaded
    timeout: "{{ docker_timeout }}"
    env:
      VIRTUAL_HOST: "push.{{ prometheus_hostname }}"
      LETSENCRYPT_HOST: "push.{{ prometheus_hostname }}"
      LETSENCRYPT_EMAIL: "{{ prometheus_email }}"

- name: Connect push gw to scraping network
  command: "docker network connect {{ service }}_net prometheus-push"
  when: prompush.changed

- name: Prometheus time series db
  register: prometheus
  docker:
    name: "{{ service }}-db"
    image: prom/prometheus
    net: bridge
    expose: 9090
    volumes:
      - "{{ service }}-db-data:/prometheus"
      - "{{ docker_config_dir }}/{{ service }}:/etc/prometheus"
    pull: always
    restart_policy: always
    restart_policy_retry: 10
    state: '{{ "restarted" if promcfg.changed else "reloaded" }}'
    timeout: "{{ docker_timeout }}"
    env:
      PUSH_GW: 9091
      VIRTUAL_HOST: "{{ prometheus_hostname }}"
      LETSENCRYPT_HOST: "{{ prometheus_hostname }}"
      LETSENCRYPT_EMAIL: "{{ prometheus_email }}"

- name: Connect Prometheus to scraping network
  command: "docker network connect {{ service }}_net prometheus-db"
  when: prometheus.changed

- name: Grafana dabase volume
  command: docker volume create --name=grafana-db

- name: Grafana config volume
  command: docker volume create --name=grafana-etc

- name: Graphing service
  register: grafana
  docker:
    name: grafana
    image: grafana/grafana
    net: bridge
    expose: 3000
    volumes:
      - grafana-db:/var/lib/grafana
      - /etc/grafana
    env:
      GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_sec_password }}"
      VIRTUAL_HOST: "{{ grafana_hostname }}"
      LETSENCRYPT_HOST: "{{ grafana_hostname }}"
      LETSENCRYPT_EMAIL: "{{ grafana_email }}"
    pull: always
    restart_policy: always
    restart_policy_retry: 10
    state: reloaded
    timeout: "{{ docker_timeout }}"

- name: Connect Grafana to scraping network
  command: "docker network connect {{ service }}_net grafana"
  when: grafana.changed
...

